name: Workflow

on:
  push:
    branches:
      - master
    tags:
      - v*
  pull_request:

jobs:
  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Build sdist
        run: pipx run build --sdist

      - uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: dist/*.tar.gz

  test_matrix:
    name: Test on ${{ matrix.os }} with Python ${{ matrix.python-version }} (tracemalloc=${{ matrix.tracemalloc }}, codecov=${{ matrix.codecov }}, sdist=${{ matrix.sdist }})
    needs: build_sdist
    runs-on: ${{ matrix.os }}-latest

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu, windows, macos]
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]
        tracemalloc: [true, false]
        codecov: [true, false]
        sdist: [true, false]

        exclude:
          - codecov: true
            sdist: true

    steps:
    - name: Checkout
      if: ${{ !matrix.sdist }}
      uses: actions/checkout@v3
    - name: Download sdist
      if: ${{ matrix.sdist }}
      uses: actions/download-artifact@v4
      with:
        name: sdist
        path: dist

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install
      if: ${{ !matrix.sdist }}
      run: pip install setuptools && python3 setup.py build_ext --inplace
      env:
        CFLAGS: ${{ matrix.codecov && '--coverage' || ''}} -UNDEBUG
    - name: Install sdist
      if: ${{ matrix.sdist }}
      shell: bash
      run: pip install -v dist/*.tar.gz
      env:
        CFLAGS: -UNDEBUG

    - name: Install codecov
      if: ${{ matrix.codecov }}
      run: pip install coverage

    - name: Make test script
      shell: bash
      run: |
        cat > test.py << EOF
        from guppy import hpy, heapy
        hpy().test()
        heapy.heapyc.xmemstats()
        EOF

    - name: Test
      if: ${{ !matrix.codecov }}
      shell: bash
      run: python test.py
      env:
        PYTHONTRACEMALLOC: ${{ matrix.tracemalloc && '1' || '' }}
        PYTHONFAULTHANDLER: 1
    - name: Test (codecov)
      if: ${{ matrix.codecov }}
      shell: bash
      run: coverage run test.py
      env:
        PYTHONTRACEMALLOC: ${{ matrix.tracemalloc && '1' || '' }}
        PYTHONFAULTHANDLER: 1

    - name: Upload codecov
      if: ${{ matrix.codecov }}
      uses: codecov/codecov-action@v5
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}


  test_arches:
    name: Test on docker ${{ matrix.arch }} with Python ${{ matrix.python-version }}
    needs: build_sdist
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        arch: [amd64, i386, arm64/v8, ppc64le, s390x, arm/v7]
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]

    steps:
    - name: Download sdist
      uses: actions/download-artifact@v4
      with:
        name: sdist
        path: dist

    - name: Setup multiarch/qemu-user-static
      run: |
        docker run --rm --privileged multiarch/qemu-user-static --reset --persistent yes

    - name: Build & Test
      run: >
        docker run --rm -v $PWD:$PWD -w $PWD --platform linux/${{ matrix.arch }}
        python:${{ matrix.python-version }} bash -c "
        pip install -v dist/*.tar.gz &&
        python -c 'import guppy; guppy.hpy().test()'
        "

  build_wheels_native:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}-latest
    if: github.event_name == 'push'
    strategy:
      matrix:
        os: [windows, macos]

    steps:
      - uses: actions/checkout@v3

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.22.0
        env:
          CIBW_BUILD: cp3{9,10,11,12,13}-*
          CIBW_ARCHS: all
          CIBW_TEST_COMMAND: python -c 'import guppy; guppy.hpy().test()'
          CIBW_TEST_COMMAND_WINDOWS: python -c "import guppy; guppy.hpy().test()"

      - uses: actions/upload-artifact@v4
        with:
          name: wheel-${{ matrix.os }}
          path: ./wheelhouse/*.whl

  build_wheels_linux:
    name: Build wheels on ubuntu ${{ matrix.arch }}
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    strategy:
      matrix:
        arch: [x86_64, i686, aarch64, ppc64le, s390x, armv7l]

    steps:
      - uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: all

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.22.0
        env:
          CIBW_BUILD: cp3{9,10,11,12,13}-*
          CIBW_ARCHS: ${{ matrix.arch }}
          CIBW_TEST_COMMAND: python -c 'import guppy; guppy.hpy().test()'

      - uses: actions/upload-artifact@v4
        with:
          name: wheel-linux-${{ matrix.arch }}
          path: ./wheelhouse/*.whl

  upload_pypi:
    needs: [test_matrix, test_arches, build_wheels_native, build_wheels_linux, build_sdist]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/v')
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: sdist
          path: dist
      - uses: actions/download-artifact@v4
        with:
          name: wheel-*
          merge-multiple: true
          path: dist

      - uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.pypi_password }}
          # To test: repository_url: https://test.pypi.org/legacy/
