.macro:: header
..header
...link
....rel=stylesheet
....href=css/guppy.css

.document: index
..output: html
..document_title: Guppy 3: A Python Programming Environment & Heap analysis toolset
..use: header

..div
...dl
....dt
.....h1:
......big: Guppy 3

....dd
.....h1: A Python Programming Environment & Heap analysis toolset
...hr

...table
....tr
.....td
......a: Guppy
.......href=#Guppy
.....td: A fish swimming in Python
....tr
.....td
......a: Heapy
.......href=#Heapy
.....td: Heap Analysis Toolset

....tr
.....td
......a: GSL
.......href=#GSL
.....td: Guppy Specification Language

....tr
.....td
......a: Documentation
.......href=#Documentation

....tr
.....td
......a: Download
.......href=#Download

....tr
.....td
......a: Credits
.......href=#Credits

....tr
.....td
......a: Contact
.......href=#Contact
...hr

..p: This is the home page for
...big:
....strong: Guppy 3

...t:, a programming environment providing object and heap memory
sizing, profiling and analysis. It includes a prototypical specification
language that can be used to formally specify aspects of

...a: Python
....href= http://www.python.org

...t: programs and generate tests and documentation from a common
source.

..p: Guppy 3 is a fork of

...a: Guppy-PE
....href=http://guppy-pe.sourceforge.net/

...t:, created by Sverker Nilsson for Python 2.

..a
...name=Guppy
...h2: Guppy

..p: Guppy is an umbrella package combining Heapy and GSL with support
utilities such as the Glue module that keeps things together.

..p: The name guppy was chosen because Nilsson found it in a
backward-dictionary as a word ending with py and he thought it was cute
enough and that it would not so likely conflict with some other package
name. It was to be a general name since all kinds of packages should fit
under this top level name.

..a
...name=Heapy
...h2: Heapy
..p: The aim of Heapy is to support debugging and optimization
regarding memory related issues in Python programs.

..p: Such issues can make a program use too much memory, making it
slow by itself as well as slowing down an entire server, or it may
fail to run at all in a limited memory device such as a mobile phone.

..p: The primary motivation for Heapy is that there has been a lack of
support for the programmer to get information about the memory usage
in Python programs. Heapy is an attempt to improve this situation. A
project with a similar intent is

...a: PySizer.
....href=http://pysizer.8325.org

..p: The problem situation has a number of aspects, which Nilsson think
can be characterised, for example, as follows.

..ul
...li: What data about memory and objects to get from the system.
...li: How to get that data technically.
...li: How portable to be across platforms and versions.
...li: How to process data to compress it and find structure in it.
...li: How to present the resulting information to the user.
...li: How to make a coherent, useful & usable system of it all
that doesn't interfer too much with the target system it is analysing.

..p: As Heapy has evolved, with considerations like this in mind,
it currently provides the following features.

..div
...h3: Data gathering
...div
....ul
.....li: Finds reachable and/or unreachable objects in the object
heap, and collects them into special C-implemented 'nodesets'. Can get
data about the objects such as their sizes and how they refer to each
other.

.....li: Uses a C library that can get data about non-standard
types from extension modules, given a function table.

.....li: Optionally uses multiple Python interpreters in the same
process, so one can monitor the other transparently.


...h3: Data processing
...div
....ul:

.....li: Algebraic set operations, for example the set difference can
be used to extract the objects allocated after a reference point in
time.

.....li: Various classifications of object sets, and different
classifiers can be combined.

.....li: Shortest paths to a set of objects from other objects,
which can be used to find out why the objects are retained in memory.

.....li: Calculation of the 'dominated' set from a set of root
objects which yields the set of objects that would be deallocated if the
root objects were deallocated.

...h3: Presentation
...div
....ul
.....li: Tables where each row represents a classification of data.

.....li: Lists of shortest paths where the edges show the
relationships found between the underlying C objects.

.....li: Reference pattern, presenting a spanning tree of the
graph with sets of objects treated as a unit.

.....li: Limits the number of rows when presentation objects are
shown, without depending on an external pager.

.....li: An interactive graphical browser program can show a time
sequence of classified heap data sets as a graph together with a table
detailing the data at a specific time or the difference between two
points in time.

...h3: Portability aspects
...div
....ul

.....li: Can be used with an unmodified C Python, back to version 3.9
AFAIK. Does not depend on any external unix-specific or other
utilities.

.....li: Requires Tk if the graphical browser is to be used.
.....li: Can not be used with Jython or other non-C Python versions.

...h3: System aspects
...div
....ul
.....li: A general 'glue' model provides a session context that
imports modules and creates objects automatically when accessed. The
glue model is not Heapy specific but is used throughout Guppy and
could be used by other packages as well.

.....li: The glue model makes it practical to have everything in Guppy
being dynamically allocated in a session context, so there is no need
for any global module-level variables. The modules themself are stored
as usual in sys.modules but they are not modified.

.....li: To be true there is one exception Nilsson come to think of but
it is really exceptional.

..p: Heapy has been used during development of itself and of the other
parts of Guppy. It has been used to tell how much memory the parts of
compound objects use, to see what could be worthwhile to optimize. It
was used to find a memory leak in the Heapy profile browser, and to
find out the cause, which as far as Nilsson can tell was due to a bug
in a library routine which he have reported.

..a
...name=GSL
...h2: GSL
..p: The Guppy Specification Language is an evolving specification
language. Nilsson started experimenting with this language because he
felt the need to have a way to specify documentation and tests from the
same source. GSL can describe aspects of a system, especially its API,
in a way that can be automatically converted to tests as well as to
documents. The documents generated have a formal structure for
describing the formal aspects of the specification, complemented with
descriptive text from the same source documents. A language that is
similar in intent is the

...a: Assertion Definition Language
....href=http://adl.opengroup.org/
...t:.

..p: Specifications written in GSL can be used for:

..ul

...li: Generating documentation

....p: Documents are generated from a combination of formally
described aspects and descriptive text. The formal aspects include
specifications of attributes and methods and their parameters and
return values. The descriptive text is written together with the
formal specifications. It can include HTML tags and attributes,
specified in the GSL dotted tree format. Output modules can convert
from the GSL form to formats such as HTML or Latex.

...li: Generating tests

....p: The tests generated can check the formal aspects of the
specification against an implementation. It can test whether objects
have the promised attributes, and then if the kind of attribute is
specified it is tested again and so on. Methods are checked to see if
they can be called with the forms of parameters specified. The return
value can then be checked up to some limit of recursion.

...li: Resolving compatibility issues

....p: A specification can be compared to a previous specification, to
tell according to formalized rules whether or not the new one is
backwards compatible with the old one, and if not, in what way they
differ. For example, according to such rules, an attribute or
parameter type can be added to a specification, but it can not be
removed. The idea is that all tests possibly generated from the old
specification should still succeed with objects conforming to the new
specification. -- A program could likely compare specifications for
compatibility automatically, but this is not yet implemented.

..p: GSL has been used to generate the documentation for this Guppy
distribution. Some part of the specification has been checked against
the implementation using the generated tests, which did reveal some
discrepancies that were subsequently corrected.

..p: The documents generated by GSL use a formal syntax to describe
parameter modes.
...a: This
....href=docexample.html

...t: document contains examples of such parameter descriptions and
explains what they mean.


..a
...name=Documentation
...h2: Documentation


..p: Some documentation is included with the source code distribution
and can also be browsed here via the following links.

...table:
....class=list
....tr:
.....class=even
.....td
......a: Getting started with Heapy
.......href=heapy_tutorial.html
.....td: An example of how to get started with Heapy
....tr:
.....class=odd
.....td
......a: Document example
.......href=docexample.html
.....td: Explains the meaning of some aspects of the documents.
....tr:
.....class=even
.....td
......a: Guppy
.......href=guppy.html
.....td: Specification of
......code: guppy
......t:, the top level module.

....tr:
.....class=odd
.....td
......a: Profile Browser
.......href=ProfileBrowser.html
.....td: How to use the graphical heap profile browser.

....tr:
.....class=even
.....td
......a: Screenshot
.......href=pbscreen.jpg
.....td: Example showing the graphical heap profile browser in action.

....tr:
.....class=odd
.....td
......a: GSL
.......href=gsl.html
.....td: The Guppy Specification Language.

....tr:
.....class=even
.....td
......a: heapyc
.......href=heapyc.html

.....td: Specification of the heapyc extension module. Note that this
is an internal interface and may be subject to change.

....tr:
.....class=odd
.....td
......a: sets
.......href=sets.html
.....td: Specification of the interface to the
setsc extension module which contains bitsets and nodesets.
....tr:
.....td
......id=last
......colspan=5

..p: The following documentation is not included with the source code.

...table
....class=list
....tr:
.....class=odd
.....td
......a: heapy-thesis.pdf
.......href=http://guppy-pe.sourceforge.net/heapy-thesis.pdf

.....td: The master's thesis, "Heapy: A Memory Profiler and Debugger
for Python", which presents background, design, implementation,
rationale and some use cases for Heapy (version 0.1).

....tr
.....class=even
.....td
......a: Metadata and Abstract
.......href=http://urn.kb.se/resolve?urn=urn:nbn:se:liu:diva-7247
.......c:href=http://www.diva-portal.org/liu/abstract.xsql?dbid=7247
.....td: Published at
......a: Linköping University Electronic Press.
.......href= http://www.ep.liu.se/
....tr:
.....class=odd
.....td
......a: heapy-presentation.pdf
.......href=http://guppy-pe.sourceforge.net/heapy-presentation.pdf
.....td: Slides from the presentation.
....tr
.....td
......id=last
......colspan=5

..h3: External resources

..p: Thanks to all that have written about Heapy on various blogs. Nilsson
and I think the following links may be especially useful to get
started. More tips are very welcome!

..ul
...li
....a:How to use guppy/heapy for tracking down memory usage
.....href=https://smira.ru/wp-content/uploads/2011/08/heapy.html
....t: (pkgcore - Trac)
...li
....a:Debugging Django memory leak with TrackRefs and Guppy
.....href=https://opensourcehacker.com/2008/03/07/debugging-django-memory-leak-with-trackrefs-and-guppy/
....t: (Redi for Life)
...li
....a:Diagnosing Memory “Leaks” in Python
.....href=https://chase-seibert.github.io/blog/2013/08/03/diagnosing-memory-leaks-python.html
...li
....a:Digging into python memory issues in ckan with heapy
.....href=https://joetsoi.github.io/debugging-python-ckan-memory-issues/
...li
....a:Optimizing memory usage in Python: a case study
.....href=https://web.archive.org/web/20230614181724/https://guillaume.segu.in/blog/code/487/optimizing-memory-usage-in-python-a-case-study/
...li
....a:Memory profiling in python
.....href=https://quantlane.com/blog/python-memory-profiling/
...li
....a:guppy/heapy - Profile Memory Usage in Python
.....href=https://coderzcolumn.com/tutorials/python/guppy-heapy-profile-memory-usage-in-python

..a
...name=Download
...h2: Download
..p

The latest version is in the git repository.
..p: To check out the latest revision, you can do:

..pre
git clone https://github.com/zhuyifei1999/guppy3.git guppy

..a
...name=Credits
...h2: Credits
..ul

...li: Sverker Nilsson is the original author and maintainer of Guppy-PE.
It is truly exceptional.

...li: Claudio Grondi has tested in Microsoft XP and reported the
problems that occurred. The ANSI-compatibility problems Nilsson think have
been fixed but there also seemed to be problems with the .NET C compiler
which he haven't had a chance to sort out yet.

...li: Patrik Andersson has helped me installing Ubuntu Linux on my new
computer and to make it dual-boot with Microsoft XP. (But we don't have
any C compiler for Windows XP (yet).)

...li: Chad Austin has supplied a patch for compiling on Windows w/
Visual Studio 2003 and Python 2.5. Nilsson think this may fix similar
problems with other MS compilers, Cygwin & Mingw as well.

...li: Yaroslav Halchenko is packaging and uploading Guppy into the
Debian distribution.

..a
...name=Contact
...h2: Contact

..dl
...dt: The author, YiFei Zhu, may be contacted at:

...dd
....address
.....a: zhuyifei1999@gmail.com
......href=mailto:zhuyifei1999@gmail.com

...dt: Please report bugs preferably via the GitHub issue tracker

...dd
....a: https://github.com/zhuyifei1999/guppy3/issues
.....href=https://github.com/zhuyifei1999/guppy3/issues

...dt: The GitHub project page is:
...dd
....a: https://github.com/zhuyifei1999/guppy3/
.....href= https://github.com/zhuyifei1999/guppy3/
